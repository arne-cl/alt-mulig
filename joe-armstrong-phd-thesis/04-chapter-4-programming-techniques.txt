4
T

Programming
Techniques

he previous chapter was about Erlang, but not about how to program in Erlang. This chapter is about Erlang programming techniques. The programming techniques are concerned with:

• Abstracting out concurrency — concurrent programs are, in some
sense, more diecult to write than sequential programs. Instead of
writing one module which has both concurrent and sequential code
I show how to structure the code into two modules, one of which
has all the concurrent code, the other having only purely sequential
code.
• Maintaining the Erlang view of the world — in Erlang terms everything is a process. To help maintain this view I introduce the idea
of a protocol converter, which helps the programmer maintain the
illusion that everything is an Erlang process.
• The Erlang view of errors — the treatment of how errors are handled in Erlang is radically dicerent from most other programming
languages, I show how error situations should be programmed in
Erlang.
• Intentional programming — this is a programming style where the
programmer can easily see from the code exactly what the programmer intended, rather than by guessing at the meaning from
a superficial analysis of the code.
85

86

CHAPTER 4. PROGRAMMING TECHNIQUES

Figure 4.1: A generic component with plugins. All the concurrency and
fault-handling are handled in the generic component. The plugins are
written with purely sequential code.

4.1

Abstracting out concurrency

When we program we want to structure the code into “diecult” and “easy”
modules. The diecult modules should be few and written by expert programmers. The easy modules should be many and written by less experienced programmers. Figure 4.1 shows a generic component (the diecult
part), and a number of “plugins” (the easy parts) which are used to parameterise the generic component.
The generic component should hide details of concurrency and mechanisms for fault-tolerance from the plugins. The plugins should be written
using only sequential code with well-defined types.
In the following I show how to structure a client-server into a generic
component and a number of plugins.
Structuring a system into generic component and plugins is a common programming technique—what is unusual in our approach is that the
generic component can provide a rich environment in which to execute
the plugin. The plugin code itself can have errors, and the code in the
plug-in can be dynamically modified, the entire component can be moved
in a network, and all this occurs without any explicit programming in the
plugin code.

4.1. ABSTRACTING OUT CONCURRENCY

87

Abstracting out concurrency is one of the most powerful means available for structuring large software systems. Despite the ease with which
concurrent programs can be written in Erlang it is still desirable to restrict
code which explicitly handles concurrency to as few modules as possible.
The reason for this is that concurrent code cannot be written in a sideecect free manner, and as such, is more diecult to understand and analyse
than purely sequential side-ecect free code. In a system involving large
numbers of processes, issues of message passing ordering and potential
dead- or live-lock problems can make concurrent systems very diecult to
understand and program.
The most common abstraction used by applications written in Erlang is
the client–server abstraction. In virtually all systems that are programmed
in Erlang, use of the client-server abstraction far outweighs the use of any
other abstraction. For example, on page 174 we see that 63% of all the
behaviours used in the AXD301 system were instances of the gen_server
behaviour which provides a client-server abstraction.
I will start with a simple universal client-server server1 and then show
how it can be parameterised to form a simple name service.
I will also extend the simple server in two ways. Firstly I modify
the basic server to form a fault tolerant server server2, then I extend
it to a version providing dynamic code upgrade (server3). The step-wise
refinement of the server code, server1 -> server2 -> server3 leads
eventually to gen_server which is one of the standard behaviours in the
OTP libraries. The code for gen_server performs many more operations
than are performed in the simple server examples shown here. The principles, however, of the gen_server are the same as for the simple server
examples; namely that the client-server is separated into a generic part,
which takes care of the concurrency, and a sequent plug-in modules which
merely parameterises the generic server in a particular manner to create a
specific instance of a server.
The treatment of both these extensions is deliberately simplistic. I have
ignored many implementation issues in favour of a simple explanation
which demonstrates the principles involved.
The client-server model is illustrated in figure 4.2. The client-server
model is characterized by a central server and an arbitrary number of

88

CHAPTER 4. PROGRAMMING TECHNIQUES
Query
Reply
Clients

Server

Figure 4.2: Client server

clients. The client server model is generally used for resource management operations. We assume that several dicerent clients want to share
a common resource and that the server is responsible for managing the
resource.
If we ignore how the server is started and stopped and ignore all error
cases then it is possible to describe the server by means of a single function
F.
Let us suppose that the server is in a state State and that it receives a
message Query from some client. The server should respond to this query
by returning a message Reply to the client and changing state to State1.
These values are completely determined by the server function F and
are computed by the Erlang expression:
{State1, Reply} = F(Query, State)
which is evaluated within the server.
The first universal server server1.erl is shown in figure 4.3. The
client stub routine rpc (lines 13–17) sends a messages to the server (line
14) and waits for a reply (lines 15–17). The server receives the message
sent by the client stub (line 23), computes a reply and a new state (line
24), sends the reply back to the server (line 25), and recursively calls
itself (line 26). Note that the recursive call to loop/3 (line 26) is a tailcall (see section 3.3.8), because it is a tail-call the variable State will no

4.1. ABSTRACTING OUT CONCURRENCY

1

-module(server1).

2
3

-export([start/3, stop/1, rpc/2]).

4
5
6
7
8
9

start(Name, F, State) ->
register(Name,
spawn(fun() ->
loop(Name, F, State)
end)).

10
11

stop(Name) ->

Name ! stop.

12
13
14
15
16
17

rpc(Name, Query) ->
Name ! {self(), Query},
receive
{Name, Reply} -> Reply
end.

18
19
20
21
22
23
24
25
26
27

loop(Name, F, State) ->
receive
stop ->
void;
{Pid, Query} ->
{Reply, State1} = F(Query, State),
Pid ! {Name, Reply},
loop(Name, F, State1)
end.

Figure 4.3: A simple server.

89

90

CHAPTER 4. PROGRAMMING TECHNIQUES

longer be accessible by any code and thus any storage accessed by State
that cannot be reached from State1 will eventually be reclaimed by the
garbage collector. loop/3 is said therefore to run in constant space, apart,
that is, from the local storage (stored in the variable State) which is
needed to store the state of the server itself. server1.erl exports three
routines:
• start(Name, Fun, State) — starts a server with name Name.
The initial state of the server is State, Fun is a function which
completely characterises the behaviour of the server.
• stop(Name) — stops the server Name.
• rpc(Name, Q) — perform a remote procedure call on the server
called Name.
We can use this server to implement a very simple “Home Location
Register1 ” which we call VSHLR (Very Simple HLR). Our VSHLR has
the following interface:
• start() — starts the HLR.
• stop() — stops the HLR.
• i_am_at(Person,Loc) — tells the HLR that Person is at the location Loc.
• find(Person) -> {ok, Loc} | error — tries to find the position
of Person in the HLR. The HLR responds with {ok, Loc} where
Loc is the last reported location, or, error if it doesn’t know where
the person is.
vshlr1 can be implemented by parameterising server1, this is shown
in figure 4.4.
Here is a simple session using the server:
1
Home location registers are widely used in the telecoms industry to keep track of the current location
of a mobile user.

4.1. ABSTRACTING OUT CONCURRENCY

-module(vshlr1).
-export([start/0, stop/0, handle_event/2,
i_am_at/2, find/1]).
-import(server1, [start/3, stop/1, rpc/2]).
-import(dict,
[new/0, store/3, find/2]).
start() -> start(vshlr, fun handle_event/2, new()).
stop() -> stop(vshlr).
i_am_at(Who, Where) ->
rpc(vshlr, {i_am_at, Who, Where}).
find(Who) ->
rpc(vshlr, {find, Who}).
handle_event({i_am_at, Who, Where}, Dict) ->
{ok, store(Who, Where, Dict)};
handle_event({find, Who}, Dict) ->
{find(Who, Dict), Dict}.

Figure 4.4: A Very Simple Home Location Register.

91

92

CHAPTER 4. PROGRAMMING TECHNIQUES
1> vshlr1:start().
true
2> vshlr1:find("joe").
error
3> vshlr1:i_am_at("joe", "sics").
ack
4> vshlr1:find("joe").
{ok,"sics"}

Even though our VSHLR program is extremely simple, it illustrates
and provides simple solutions to a number of design problems. The reader
should note the following:
• There is a total separation of functionality into two dicerent modules.
All the code that has to do with spawning processes, sending and
receiving messages etc is contained in server1.erl. All the code
that has to do with the implementation of the VSHLR is contained
in vshlr1.erl.
• The code in vshlr1.erl makes no use of any of the Erlang concurrency primitives. The programmer who writes this module needs to
know nothing about concurrency or fault-handling.
The second point is very important. This is an example of factoring
out concurrency—since writing concurrent programs is generally perceived
as being diecult and since most programmers are more experienced in
writing sequential code then being able to factor out the concurrency is a
distinct advantage.
Not only can we factor out concurrency but we can mask possible
errors in the code which is used to parameterise the server function. This
is shown in the next section.

4.1.1

A fault-tolerant client-server

I now extend the server by adding code for error recovery, as shown in
figure 4.5. The original server will crash if there is an error in the function

4.1. ABSTRACTING OUT CONCURRENCY

93

F/2. The term “fault-tolerance” usually applies to hardware, but here we
mean the sever will tolerate faults in the function F/2 which is used to
parameterise the server.
The function F/2 is evaluated within a catch and the client is killed if
a RPC request is made which would have killed the server.
Comparing the new server with the old we note two small changes:
the rpc code has changed to:
rpc(Name, Query) ->
Name ! {self(), Query},
receive
{Name, crash} -> exit(rpc);
{Name, ok, Reply} -> Reply
end.
and the code in the inner section of the receive statement in loop/3:
case (catch F(Query, State)) of
{’EXIT’, Why} ->
log_error(Name, Query, Why),
From ! {Name, crash},
loop(Name, F, State);
{Reply, State1} ->
From ! {Name, ok, Reply},
loop(Name, F, State1)
end
Looking at these changes in more detail we observe that if evaluating the function in the server loop raises an exception then three things
happen:
1. The exception is logged—in this case we just print out the exception
but in a more sophisticated system we would log it on non-volatile
storage.

94

CHAPTER 4. PROGRAMMING TECHNIQUES

-module(server2).
-export([start/3, stop/1, rpc/2]).
start(Name, F, State) ->
register(Name, spawn(fun() -> loop(Name,F,State) end)).
stop(Name) -> Name ! stop.
rpc(Name, Query) ->
Name ! {self(), Query},
receive
{Name, crash} -> exit(rpc);
{Name, ok, Reply} -> Reply
end.
loop(Name, F, State) ->
receive
stop -> void;
{From, Query} ->
case (catch F(Query, State)) of
{’EXIT’, Why} ->
log_error(Name, Query, Why),
From ! {Name, crash},
loop(Name, F, State);
{Reply, State1} ->
From ! {Name, ok, Reply},
loop(Name, F, State1)
end
end.
log_error(Name, Query, Why) ->
io:format("Server ~p query ~p caused exception ~p~n",
[Name, Query, Why]).

Figure 4.5: A simple server with error recovery.

4.1. ABSTRACTING OUT CONCURRENCY

95

2. A crash message is sent to the client. When the crash message is received by the client it will raise an exception in the client code. This
is desirable since it is probably pointless for the client to continue.
3. The server continues to operate with the old value of the state variable. Thus the RPC obeys “transaction semantics” that is to say, it
either succeeds in its entirety and the state of the server is updated,
or, it fails, in which case the state of the server is unchanged.
Note that the code in server2.erl is only written to protect against
an error in the characteristic function which parameterises the server. If
the server itself dies (it could, for example, be deliberately killed by some
other process in the system), then the client RPC stub will hang indefinitely,
waiting for a reply message that will never be sent. If we wish to guard
against this possibility, then we could write the RPC routine as follows:
rpc(Name, Query) ->
Name ! {self(), Query},
receive
{Name, crash} -> exit(rpc);
{Name, ok, Reply} -> Reply
after 10000 ->
exit(timeout)
end.
This solution, while it solves one problem, introduces another problem: What value should we choose for the timeout?. A better solution,
which I will not elaborate here, makes use of applications and supervision trees. Server failures, should be detected not by client software, but
by special supervisor processes which are responsible for correcting the
errors introduced by the failure of a server.
We can now run this server parameterised with a version of VSHLR
(vshlr2) which contains a deliberate error:
A session using this modified server is shown below:

96

CHAPTER 4. PROGRAMMING TECHNIQUES

-module(vshlr2).
-export([start/0, stop/0, i_am_at/2, find/1]).
-import(server2, [start/3, stop/1, rpc/2]).
-import(dict,
[new/0, store/3, find/2]).
start() -> start(vshlr, fun handle_event/2, new()).
stop() -> stop(vshlr).
i_am_at(Who, Where) ->
rpc(vshlr, {i_am_at, Who, Where}).
find(Who) ->
rpc(vshlr, {find, Who}).
handle_event({i_am_at, Who, Where}, Dict) ->
{ok, store(Who, Where, Dict)};
handle_event({find, "robert"}, Dict) ->
1/0;
handle_event({find, Who}, Dict) ->
{find(Who, Dict), Dict}.

Figure 4.6: A home location register with a deliberate error.

4.1. ABSTRACTING OUT CONCURRENCY

97

> vshlr2:start().
true
2> vshlr2:find("joe").
error
3> vshlr2:i_am_at("joe", "sics").
ok
4> vshlr2:find("joe").
{ok,"sics"}
5> vshlr2:find("robert").
Server vshlr query {find,"robert"}
caused exception {badarith,[{vshlr2,handle_event,2}]}
** exited: rpc **
6> vshlr2:find("joe").
{ok,"sics"}
Hopefully the information in the exception is suecient to debug the
program (satisfying requirement R3 on page 27).
As a final improvement we modify the server in figure 4.5 to allow us
to change the code in the server “on-the-fly,” this is shown in figure 4.7.
I will parameterise this with vshlr3. vshlr3 is not shown here but
it is identical to vshlr2 with one exception; server2 in line three of the
module is replaced by server3.
1> vshlr3:start().
true
2> vshlr3:i_am_at("joe", "sics").
ok
3> vshlr3:i_am_at("robert", "FMV").
ok
4> vshlr3:find("robert").
Server vshlr query {find,"robert"}
caused exception {badarith,[{vshlr3,handle_event,2}]}
** exited: rpc **
5> vshlr3:find("joe").
{ok,"sics"}

98

CHAPTER 4. PROGRAMMING TECHNIQUES

-module(server3).
-export([start/3, stop/1, rpc/2, swap_code/2]).
start(Name, F, State) ->
register(Name, spawn(fun() -> loop(Name,F,State) end)).
stop(Name) -> Name ! stop.
swap_code(Name, F) -> rpc(Name, {swap_code, F}).
rpc(Name, Query) ->
Name ! {self(), Query},
receive
{Name, crash} -> exit(rpc);
{Name, ok, Reply} -> Reply
end.
loop(Name, F, State) ->
receive
stop -> void;
{From, {swap_code, F1}} ->
From ! {Name, ok, ack},
loop(Name, F1, State);
{From, Query} ->
case (catch F(Query, State)) of
{’EXIT’, Why} ->
log_error(Name, Query, Why),
From ! {Name, crash},
loop(Name, F, State);
{Reply, State1} ->
From ! {Name, ok, Reply},
loop(Name, F, State1)
end
end.
log_error(Name, Query, Why) ->
io:format("Server ~p query ~p caused exception ~p~n",
[Name, Query, Why]).

Figure 4.7: A simple server with error recovery and dynamic code replacement.

4.1. ABSTRACTING OUT CONCURRENCY

99

6> server3:swap_code(vshlr,
fun(I,J) -> vshlr1:handle_event(I, J) end).
ok
7> vshlr3:find("robert").
{ok,"FMV"}
The above trace illustrates how to change the code in the server “on
the fly.” Lines 1-3 show the server working properly. In line 4 we trigger
the deliberate error programmed into vshlr3. Server3 handles this error
without crashing, so, for example, the response in line 5 is correct. In line
6 we send a command to change the code in the server back to the correct
version in vshlr1. Ader this command has completed, the server works
correctly as shown in line 7.
The programmer who wrote the code in vshlr3 did not need to know
anything about how server3 was implemented nor that the code in the
server could be dynamically changed without taking the server out of
service.
The ability to change software in a server without stopping the server
partially fulfils requirement 8 on page 14—namely to upgrade the software
in a system without stopping the system.
If we return once again to the code for server3 in figures 4.5 (the
server) and vshlr2 in figure 4.6 (the application), we observe the following:
1. The code in the server can be re-used to build many dicerent clientserver applications.
2. The application code is much simpler than the server code.
3. To write the server code the programmer must understand all the
details of Erlang’s concurrency model. This involves name registration, process spawning, untrappable exits to a process, and sending
and receiving messages. To trap an exception the programmer must
understand the notion of an exception and be familiar with Erlang’s
exception handling mechanisms.

100

CHAPTER 4. PROGRAMMING TECHNIQUES

4. To write the application, the programmer only has to understand
how to write a simple sequential program—they need to know nothing about concurrency or error handling.
5. We can imagine using the same application code in a succession of
progressively more sophisticated servers. I have shown three such
servers but we can imagine adding more and more functions to the
server while keeping the server/application interface unchanged.
6. The dicerent servers (server1, server2 etc) imbue the application
with dicerent non-functional characteristics. The functional characteristics for all servers are the same (that it, given correctly typed
arguments all programs will eventually produce identical results);
but the non-functional characteristics are dicerent.
7. The code which implements the non-functional parts of the system
is limited to the server (by non-function we mean things like how the
system behaves in the presence of errors, how long time function
evaluation takes, etc) and is hidden from the application programmer.
8. The details of how the remote procedure call is implemented are
hidden inside the server module. This means that the implementation could be changed at a later stage without changing the client
code, should this become necessary. For example, we could change
the details of how rpc/2 is implemented in figure 4.5 without having to change any of the client software which calls the functions in
server2.
The division of the total server functionality into a non-functional part
and a functional part is good programming practice and gives the system
several desirable properties, some of which are:
1. Concurrent programming is oden perceived as being diecult. In
a large programming group, where the programmers have dicerent
skill levels the expert programmers should write the generic server

4.2. MAINTAINING THE ERLANG VIEW OF THE WORLD

101

code, and the less-experienced programmers should write the application code.
2. Formal methods could be applied to the (simpler) application code.
Work on the formal verification of Erlang, or on type systems designed to infer types from Erlang code have problems analysing concurrent programs. If the code in the generic servers is assumed to
be correct a priori then the problem of proving properties of the
system reduces to the problem of proving properties of sequential
programs.
3. In a system with a large number of client-servers all the servers can
be written with the same generic server. This makes it easier for
a programmer to understand and maintain several dicerent servers.
In section 8.3.1 we will investigate this claim when we analyse a large
system with many servers.
4. The generic servers and applications can be tested separately and
independently. If the interface remains constant over a long period
of time then both can be independently improved.
5. The application code can be “plugged into” a number of dicerent
generic servers, where these servers have dicerent non-functional
characteristics. Special servers, with the same interface, could provide an enhanced debugging environment etc. Other servers could
provide clustering, hot standby etc. This has been done in a number
of projects, for example Eddie [31] provided clustering and the Bluetail mail robustifier [11] provided a server with hot standby facilities.

4.2

Maintaining the Erlang view of the
world

The Erlang view of the world is that everything is a process and that
processes can only interact by exchanging messages.

102

CHAPTER 4. PROGRAMMING TECHNIQUES

When we interface Erlang programs to external software it is oden
convenient to write an interface program which maintains the illusion that
“everything is a process.”
As an example of this, we consider how to implement a web-server.
Web-servers communicate with clients using the HTTP protocol as defined
in RFC2616 [36].
From the point of view of an Erlang programmer, the inner loop of
a web server would spawn a new process for each connection, accept a
request from the client and respond appropriately. The code for this would
be something like:
serve(Client) ->
receive
{Client, Request} ->
Response = generate_response(Request)
Client ! {self(), Response}
end.
Where Request and Response are Erlang terms representing HTTP
requests and HTTP responses.
The above server is very simple, it expects a single request, replies with
a single response and terminates the connection.
A more sophisticated server, would support HTTP/1.1 persistent connections, the code for this is remarkably simple:
serve(Client) ->
receive
{Client, close} ->
true;
{Client, Request} ->
Response = generate_response(Request)
Client ! {self(), Response},
server(Client);
after 10000 ->
Client ! {self(), close}
end.

4.2. MAINTAINING THE ERLANG VIEW OF THE WORLD

HTTP
Driver

Web
Server
Erlang terms

103

TCP
driver
TCP packets

Figure 4.8: A web server

This 11 line function is essentially all that is needed to make a primitive
web server with persistent connections.
The web server does not talk directly to the clients which are making
HTTP requests. To do so would significantly clutter up the web-server
code with irrelevant detail and make the structure diecult to understand.
Instead it makes use of a “middle-man” process (see figure 4.8). The
middle-man process (an HTTP driver) converts between HTTP requests
and responses and the corresponding Erlang terms which represent these
requests and responses.
The overall structure of the HTTP driver is as follows:
relay(Socket, Server, State) ->
receive
{tcp, Socket, Bin} ->
case parse_request(State, Data) of
{completed, Request, State1} ->
Server ! {self(), {request, Req}},
relay(Socket, Server, State1);
{more, State1} ->
relay(Socket, Server, State1)
end;
{tcp_closed, Socket} ->
Server ! {self(), close};
{Server, close} ->
gen_tcp:close(Socket);
{Server, Response} ->
Data = format_response(Response),

104

CHAPTER 4. PROGRAMMING TECHNIQUES
gen_tcp:send(Socket, Data),
relay(Socket, Server, State);
{’EXIT’, Server, _} ->
gen_tcp:close(Socket)
end.

If a packet comes from the client, via a TCP socket, it is parsed by
calling parse_request/2. When the response is complete an Erlang term
representing the request is sent to the server. If a response comes from the
server it is reformatted and then sent to the client. If either side terminates
the connection, or an error occurs in the server, the connection is closed
down. If this process terminates for any reason all the connections are
automatically closed down.
The variable State is a state variable representing the state of a reentrant parser that is used to parse the incoming HTTP requests.
The entire code for the web-server is not shown here but can be downloaded from [15].

4.3

Error handling philosophy

Error handling in Erlang is radically dicerent to error handing in most
other programming languages. The Erlang philosophy for handling errors
can be expressed in a number of slogans:
• Let some other process do the error recovery.
• If you can’t do what you want to do, die.
• Let it crash.
• Do not program defensively.

4.3.1

Let some other process fix the error

How can we handle errors in a distributed system? To handle hardware
errors we need replication. To guard against the failure of an entire computer we need two computers.

4.3. ERROR HANDLING PHILOSOPHY

Computer 1

105

Computer 2

If computer 1 fails, computer 2 notices the failure and corrects
the error.
If the first computer crashes the failure is noticed by the second computer which will try to correct the error. We use exactly the same method
in Erlang, only instead of computers we use pairs of processes.
{’EXIT’,Pid,Why}
Pid 1

Pid 2

If process 1 fails, process 2 notices the failure and corrects the
error.
If the process Pid1 fails and if the processes Pid1 and Pid2 are linked
together and if process Pid2 is set to trap errors then a message of the
form {’EXIT’,Pid1,Why} will be delivered to Pid2 if Pid1 fails. Why
describes the reason for failure.
Note also that if the computer on which Pid1 executes dies, then an
exit message {’EXIT’,Pid1,machine_died} will be delivered to Pid2.
This message appears to have come from Pid1, but in fact comes from
the run-time system of the node where Pid2 was executing.
The reason for coercing the hardware error to make it look like a
software error is that we don’t want to have two dicerent methods for
dealing with errors, one for software errors and the other for hardware errors. For reasons of conceptual integrity we want one uniform mechanism.
This, combined with the extreme case of hardware error, and the failure
of entire processors, leads to the idea of handling errors, not where they
occurred, but at some other place in the system.
Thus under all circumstances, including hardware failure it is Pid2’s
job to correct the error. This is why I say “let some other process fix the
error.”

106

CHAPTER 4. PROGRAMMING TECHNIQUES

This philosophy is completely dicerent to that used in a sequential
programming language where there is no alternative but to try and handle
all errors in the thread of control where the error occurs. In a sequential
language with exceptions, the programmer encloses any code that is likely
to fail within an exception handling construct and tries to contain all errors
that can occur within this construct.
Remote handling of error has several advantages:
1. The error-handling code and the code which has the error execute
within dicerent threads of control.
2. The code which solves the problem is not cluttered up with the code
which handles the exception.
3. The method works in a distributed system and so porting code from
a single-node system to a distributed system needs little change to
the error-handling code.
4. Systems can be built and tested on a single node system, but deployed on a multi-node distributed system without massive changes
to the code.

4.3.2

Workers and supervisors

To make the distinction between processes which perform work, and processes which handle errors clearer we oden talk about worker and supervisor processes:
One process, the worker process, does the job. Another process, the
supervisor process. observes the worker. If an error occurs in the worker,
the supervisor takes actions to correct the error. The nice thing about this
approach is that:
1. There is a clean separation of issues. The processes that are supposed to do things (the workers) do not have to worry about error
handling.

4.4. LET IT CRASH

107

2. We can have special processes which are only concerned with error
handling.
3. We can run the workers and supervisors on dicerent physical machines.
4. It oden turns out that the error correcting code is generic, that is,
generally applicable to many applications, whereas the worker code
is more oden application specific.
Point three is crucial—given that Erlang satisfies requirements R3 and
R4 (see page 27) then we can run worker and supervisor processes on
dicerent physical machines, and thus make a system which tolerates hardware errors where entire processes fail.

4.4

Let it crash

How does our philosophy of handling errors fit in with coding practices?
What kind of code must the programmer write when they find an error?
The philosophy is let some other process fix the error, but what does this
mean for their code? The answer is let it crash. By this I mean that in
the event of an error, then the program should just crash. But what is an
error? For programming purpose we can say that:
• exceptions occur when the run-time system does not know what to
do.
• errors occur when the programmer doesn’t know what to do.
If an exception is generated by the run-time system, but the programmer had foreseen this and knows what to do to correct the condition that
caused the exception, then this is not an error. For example, opening a file
which does not exist might cause an exception, but the programmer might
decide that this is not an error. They therefore write code which traps this
exception and takes the necessary corrective action.

108

CHAPTER 4. PROGRAMMING TECHNIQUES

Errors occur when the programmer does not know what to do. Programmers are supposed to follow specifications, but oden the specification
does not say what to do and therefore the programmer does not know
what to do. Here is a example:
Suppose we are writing a program to produce code for a microprocessor, the specification says that a load operation is to result in opcode 1 and
a store operation should result in opcode 2. The programmer turns this
specification into code like:
asm(load) -> 1;
asm(store) -> 2.
Now suppose that the system tries to evaluate asm(jump)—what should
happen? Suppose you are the programmer and you are used to writing
defensive code then you might write:
asm(load) -> 1;
asm(store) -> 2;
asm(X)
-> ??????
but what should the ??????’s be? What code should you write? You
are now in the situation that the run-time system was faced with when it
encountered a divide-by-zero situation and you cannot write any sensible
code here. All you can do is terminate the program. So you write:
asm(load) -> 1;
asm(store) -> 2;
asm(X)
-> exit({oops,i,did,it,again,in,asm,X})
But why bother? The Erlang compiler compiles
asm(load) -> 1;
asm(store) -> 2.
almost as if it had been written:

4.5. INTENTIONAL PROGRAMMING

109

asm(load) -> 1;
asm(store) -> 2;
asm(X)
-> exit({bad_arg, asm, X}).
The defensive code detracts from the pure case and confuses the
reader—the diagnostic is oden no better than the diagnostic which the
compiler supplies automatically.

4.5

Intentional programming

Intentional programming is a name I give to a style of programming where
the reader of a program can easily see what the programmer intended by
their code. The intention of the code should be obvious from the names
of the functions involved and not be inferred by analysing the structure of
the code. This is best explained by an example:
In the early days of Erlang the library module dict exported a function
lookup/2 which had the following interface:
lookup(Key, Dict) -> {ok, Value} | notfound
Given this definition lookup was used in three dicerent contexts:
1. For data retrieval—the programmer would write:
{ok, Value} = lookup(Key, Dict)
here lookup is used for to extract an item with a known key from
the dictionary. Key should be in the dictionary, it is a programming
error if this is not the case, so an exception in generated if the key is
not found.
2. For searching—the code fragment:
case lookup(Key, Dict) of
{ok, Val} ->

110

CHAPTER 4. PROGRAMMING TECHNIQUES
... do something with Val ...
not_found ->
... do something else ...
end.
searches the dictionary and we do not know if Key is present or
not—it is not a programming error if the key is not in the dictionary.

3. For testing the presence of a key—the code fragment:
case lookup(Key, Dict) of
{ok, _} ->
... do something ...
not_found ->
... do something else ...
end.
tests to see if a specific key Key is in the dictionary.
When reading thousands of lines of code like this we begin to worry
about intentionality—we ask ourselves the question “what did the programmer intend by this line of code?”—by analysing the above three usages of
the code we arrive at one of the answers data retrieval, a search or a test.
There are a number of dicerent contexts in which keys can be looked
up in a dictionary. In one situation a programmer knows that a specific
key should be present in the dictionary and it is a programming error if
the key is not in the dictionary and the program should terminate. In
another situation the programmer does not know if the keyed item is in
the dictionary and their program must allow for the two cases where the
key is present or not.
Instead of guessing the programmer’s intentions and analyzing the
code, a better set of library routines is:
dict:fetch(Key, Dict) = Val | EXIT
dict:search(Key, Dict) = {found, Val} | not_found.
dict:is_key(Key, Dict) = Boolean

4.6. DISCUSSION

111

Which precisely expresses the intention of the programmer—here no
guesswork or program analysis is involved, we clearly read what was intended.
It might be noted that fetch can be implemented in terms of search
and vice versa. If fetch is assumed primitive we can write:
search(Key, Dict) ->
case (catch fetch(Key, Dict)) of
{’EXIT’, _} ->
not_found;
Value ->
{found, Value}
end.
This is not really good code, since first we generate an exception (which
should signal that the program is in error) and then we correct the error.
Better is:
find(Key, Dict) ->
case search(Key, Dict) of
{ok, Value} ->
Value;
not_found ->
exit({find, Key}
end.
Now precisely one exception is generated which represents an error.

4.6

Discussion

Programming is a disciplined activity. Writing clear intentional code with
apparent structure is diecult. Part of this dieculty has to do with choosing
the right abstractions. To master a complex situation we use the method
of “divide and conquer,” we split complex problems into simpler subproblems and then solve the sub-problems.

112

CHAPTER 4. PROGRAMMING TECHNIQUES

This chapter has shown how to split a number of complex problems
into simpler sub-problems. When it comes to error-handling I have shown
how to “abstract out” the errors, and argued that the program should be
divided into “pure” code and code which “fixes the errors.”
In writing a server, I have shown how to abstract out two non-functional
properties of the server. I have shown how to write a version of a server
which does not crash when there is an error in the characteristic function
which defines the behaviour of the server and I have shown how the
behaviour of the server can be changed without stopping the server.
Recovering from errors, and changing code in a running system are
typical non-functional properties that many real systems are required to
have. Oden, programming languages and systems strongly support writing
code with well-defined functional behaviour, but have poor support for the
non-functional parts of the program.
In most programming languages it is easy2 to write a pure function,
whose value depends in a deterministic manner on the inputs to the function, but it is much more diecult, and sometimes impossible, to do things
like changing the code in the system, or handling errors in a generic manner, or protecting one programmer’s code from failures in another part of
the system. For this reason the programmer makes use of services ocered
by the operating system—the operating system provides protection zones,
concurrency etc usually in the guise of processes.
There is a sense in which the operating system provides “what the
programming language designer forgot.” In a language like Erlang an
operating system is hardly necessary, indeed the OS just provides Erlang
with a number of device drivers, none of the OS mechanisms for processes,
message passing, scheduling, memory management etc are needed.
The trouble with using an OS to fill in for deficiencies in the programming language is that the underlying mechanisms of the operating system
itself cannot easily be changed. The operating systems’ ideas of what a
process is or how to do interprocess scheduling cannot be changed.
By providing the programmer with lightweight processes, and primitive
mechanisms for detecting and handling errors an application programmer
2

Well it should be easy.

4.6. DISCUSSION

113

can easily design and implement their own application operating system,
which is specifically designed for the characteristics of their specific problem. The OTP system, which is just an application program written in
Erlang, is an example of this.

114

CHAPTER 4. PROGRAMMING TECHNIQUES

5

