7

OTP

The Open Telecom Platform (OTP) is a development system designed for building and running telecommunications systems. A
block diagram of the system is shown in figure 7.1, which is taken
from the article in [66]. As can be seen from figure 7.1 the OTP system is a so-called “middleware platform” designed to be run on top of a
conventional operating system.
The OTP system was developed internally at Ericsson. Most of the
software was released into the public domain subject to the Erlang public
license.1
Included in the OTP release are the following components:

T

1. Compilers and development tools for Erlang.
2. Erlang run-time systems for a number of dicerent target environments.
3. Libraries for a wide range of common applications.
4. A set of design patterns for implementing common behavioural patterns.
5. Educational material for learning how to use the system.
6. Extensive documentation.
1

Very similar to an open source license.

161

162

CHAPTER 7. OTP

Applications

Applications written in

written in
C or other
languages

Erlang

Mnesia

SNMP
Agent

Web server

Erlang Run−time system

Commercial Operating System and computer hardware

Figure 7.1: The OTP system architecture

OTP has been ported to a number of dicerent operating systems, these
include all the major Unix-like systems (Linux, FreeBSD, Solaris, OS-X ..),
most of the Windows operating systems (Windows 95, 98, NT, ...) and a
number of embedded operating systems like VxWorks.
The Erlang run-time system is a virtual machine designed to run the intermediate code produced by the Erlang BEAM compiler. It also provides
run-time support services for a native code Erlang compiler.
The Erlang BEAM compiler replaced the original JAM compiler in
1998. The BEAM compiler [41, 42] compiles Erlang code into sequences
of instructions for a 32-bit word threaded interpreter. The original JAM
machine was a non-threaded byte code interpreter.
For additional eeciency Erlang programs can be compiled to native
code using the HIPE compiler [47] developed at the University of Uppsala.
Both interpreted BEAM and compiled code can be freely intermixed at
a module level, ie, entire modules can be compiled to either BEAM or
HIPE code, but code within an individual module cannot be intermixed.
Both the beam and HIPE machines use common code in the Erlang
run-time system for memory management, input/output, process management, and garbage collection etc.

7.1. LIBRARIES

163

The Erlang run-time system ocers many of the services which are traditionally ocered by an operating system, so by comparison with the runtime support needed for a purely sequential language the run-time system
is fairly complex. All Erlang processes are managed by the Erlang run-time
system--even when there are several tens of thousands of Erlang processes
running under control of the Erlang run-time system the host operating
system will only think that there is one process running, that being the
Erlang run-time system itself.
The Erlang compiler, on the other hand is rather simple, compared
to most other languages. Compilation is oden a simple translation of Erlang code into an appropriate primitive in the virtual machine. Thus,
for example, the spawn primitive in Erlang compiles to a single opcode
in the virtual machine (the spawn primitive) and great care was taken to
implement this as eeciently as possible.

7.1

Libraries

The OTP release contains a large set of libraries, all of which for release
purposes are considered instances of OTP applications. Release R9B contains the following applications:
• appmon -- a graphical utility to observe and manipulate supervision
trees.
• asn1 -- a compiler and run-time support for decoding and encoding
packets defined in ASN.1.
• compiler -- the Erlang compiler.
• crypto -- a set of functions for encrypting and decrypting data and
for computing message digests.
• debugger -- an Erlang source code debugger.
• erl_interface -- a set of libraries for communicating with distributed Erlang nodes.

164

CHAPTER 7. OTP
• erts -- the Erlang run-time system.
• et -- the event tracer and tools to record and give a graphical presentation of event data.
• eva -- the “event and alarm” handling application.
• gs -- a graphics system. A set of graphics routines for building GUIs.
• ic -- Erlang IDL compiler.
• inets -- an HTTP server and an FTP client.
• jinterface -- a tool to create Java to Erlang interfaces.
• kernel -- one of the two basic libraries needed to run the system
(the other is stdlib). kernel contains code for file servers, code
servers etc.
• megaco -- libraries for the Megaco2 /H248 protocols.
• mnemosyne -- a database query language for mnesia.
• mnesia -- a distributed DBMS with sod real-time properties for Erlang.
• observer -- tools for tracing and observing the behaviour of a distributed system.
• odbc -- an Erlang interface ODBC interface to SQL databases.
• orber -- an Erlang implementation of a CORBA object request
broker. Note: there are also separate applications to provide access
to various CORBA services, such as the events, notifications, file
transfers etc.
• os_mon -- a tool to monitor resource usage in the external operating
system.

2

Media Gateway Control.

7.1. LIBRARIES

165

• parsetools -- tools for parsing Erlang. Includes yecc an LALR(1)
parser generator.
• pman -- a graphic tool to inspect the state of the system. Pman can
be used to observe local or remote Erlang nodes.
• runtime_tools -- miscellaneous small routines needed in the runtime system.
• sasl -- short for “System Architecture Support Libraries.” This
application contains support for alarm handling, managing releases
etc.
• snmp -- an Erlang implementation of the Simple Network Management Protocol [24]. This application includes a MIB compilers and
tools for building MIBs etc.
• ssl -- an Erlang interface to the secure sockets layer.
• stdlib -- the “pure” Erlang libraries needed to run the system. The
other obligatory application is kernel.
• toolbar -- a graphical toolbar from which applications can be
started.
• tools -- a package of stand-alone applications for analysing and
monitoring Erlang programs. This includes tools for profiling, coverage analysis, cross reference analysis etc.
• tv -- a “table viewer.” The table viewer is a graphic application to
allow graphic browsing of tables in the mnesia database.
• webtool -- a system for managing web-based tools (such as inets).
The OTP libraries provide a highly sophisticated tool set and are a
good starting point for any commercial product, they are however, fairly
complex.

166

CHAPTER 7. OTP

Recall that all of chapter 6 was devoted to a simplified explanation
of five behaviours (gen_server, gen_event, gen_fsm, supervisor and
application) and a complete explanation of any one of these behaviours
is outside the scope of this thesis. The principles behind one of these
behaviours (gen_server) was the subject of pages 86–101.
stdlib in release R9B has some 71 modules--four of them have been
described here.
