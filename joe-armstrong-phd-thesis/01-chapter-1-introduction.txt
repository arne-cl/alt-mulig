1. Introduction

How can we program systems which behave in a reasonable manner
in the presence of software errors? This is the central question
that I hope to answer in this thesis. Large systems will probably
always be delivered containing a number of errors in the software,
nevertheless such systems are expected to behave in a reasonable manner.

To make a reliable system from faulty components places certain requirements on
the system. The requirements can be satisfied, either in the programming
language which is used to solve the problem, or in the standard libraries which
are called by the application programs to solve the problem.

In this thesis I identify the essential characteristics which I believe are
necessary to build fault-tolerant software systems. I also show how these
characteristics are satisfied in our system.

Some of the essential characteristics are satisfied in our programming language
(Erlang), others are satisfied in library modules written in Erlang.  Together
the language and libraries form a basis for building reliable software systems
which function in an adequate manner even in the presence of programming
errors.

Having said what my thesis is about, I should also say what it is not about.
The thesis does not cover in detail many of the algorithms used as building
blocks for construction fault-tolerant systems--it is not the algorithms
themselves which are the concern of this thesis, but rather the programming
language in which such algorithms are expressed. I am also not concerned with
hardware aspects of building fault-tolerant systems, nor with the software
engineering aspects of fault-tolerance.

The concern is with the language, libraries and operating system requirements
for software fault-tolerance. Erlang belongs to the family of pure message
passing languages--it is a concurrent process-based language having strong
isolation between concurrent processes. Our programming model makes extensive
use of fail-fast processes. Such techniques are common in hardware platforms
for building fault-tolerant systems but are not commonly used in software
solutions. This is mainly because conventional languages do not permit different
software modules to co-exist in such a way that there is no interference
between modules. The commonly used threads model of programming, where
resources are shared, makes it extremely diecult to isolate components from
each other--errors in one component can propagate to another component and
damage the internal consistency of the system.

1.1 Background

The work reported in this thesis started at the Ericsson Computer Science
Laborator (CSLab) in 1981. My personal involvement started in 1985 when
I joined the CSLab. The work reported here was performed in the period
1981-2003. During this time the Erlang programming language and OTP
was developed by the author and his colleagues and a number of large
applications were written in Erlang.

The system as we know it today is the result of the collective ecort of
a large number of people. Without their talents and the feedback from
our users Erlang would not be what it is today. For many parts of the
system it is diecult to say with precision exactly who did what and when,
and exactly who had the original ideas for a particular innovation. In
the acknowledgements I have tried to credit everybody as accurately as
possible.

The chronology of this work is as follows:

• 1981 -- The Ericsson CSLab was formed. One goal of this laboratory was “to
suggest new architectures, concepts and structures for future processing
systems developments” [29].

• 1986 -- I start work on the language that was to become Erlang, though at the
time the language had no name. The language started as an experiment to add
concurrent processes to Prolog--this work is described in [10]. At this stage I
did not intend to design a new programming language, I was interested in how to
program POTS (Plain Old Telephony Service)--at the time the best method for
programming POTS appeared to be a variant of Prolog augmented with parallel
processes.

• 1987 -- First mention of Erlang. By 1987 the term Erlang had been coined
(probably by the head of the CSLab Bjarne Däcker). By the end of the year a
Prolog implementation of Erlang was available.  This version of Erlang was
embedded in Prolog using Prolog infix operators and did not yet have its own
syntax.

Towards the end of 1987 the first major experiment with Erlang started--a group
of Ericsson engineers at Bollmora, led by Kerstin Ödling, started work on a
prototyping project. They chose Erlang to prototype something called
“ACS/Dunder.” ACS was an architecture which was designed for implementing the
Ericsson MD110 private automatic branch exchange (PABX).

The project was to implement a number of typical PABX features in Erlang using
the ACS architecture and compare the programming ecort with the time it was
estimated that the same job would have taken in PLEX.1

1 PLEX was the programming language used to program the MD110.

Many of the ideas found in the current Erlang/OTP system can be traced back to
this project.

• 1988 -- Some time during 1988 it became clear that Erlang was suitable for
programming Telecoms systems--so while the Bollmora group wrote applications in
Erlang the CSLab group now augmented by Robert Virding and Mike Williams worked
on improving the Erlang system.

An attempt was made to improve the eeciency of Erlang by cross compilation to
the parallel logic programming language Strand. The compilation of Erlang to
Strand is described in chapter 13 of [37].  Cross compilation to Strand
improved the performance of Erlang by a factor of six and the project was
viewed as a dismal failure.2

2 A fact not recorded in the Strand book!.

• 1989 -- The ACS/Dunder project began to produce results. The Bollmora group
showed that using ACS/Dunder with Erlang lead to an improvement in design
efficiency of a factor of somewhere between 9 and 22 times less than the
corresponding effort in PLEX.

This was result was based on the experience of prototyping some 10% of the
functionality of the Ericsson MD 110--these figures were hotly debated
(depending on whether you believed in Erlang or not).

The Bollmora group estimated that they would need a factor seventy in
performance improvement (which we had rashly promised) in order to turn the
ACS/Dunder prototype into a commercial product.

To improve the performance of Erlang I designed the JAM machine (Joe’s abstract
machine). The design of the JAM machine was loosely based on the Warren
abstract machine [68]. Since Erlang started as an extension to Prolog it seemed
reasonable that the techniques used to eeciently implement Prolog could also be
applicable to Erlang.  This intuition proved correct. The JAM machine was
similar to the WAM with the addition of parallel processes, message passing and
failure detection and with the omission of backtracking. Compilation of pattern
matching was essentially the same as in the WAM. The original JAM instruction
set and details of the compilation process were published in [9].

The design of the JAM was completed in 1989. The first implementation was an
instruction set emulator written in Prolog which emulated the JAM machine. This
was very inefficient and could evaluate approximately 4 reductions per second,
but it was suecient to evaluate and test the virtual machine and to allow the
Erlang compiler to be written in Erlang itself.

Once the design of the JAM was complete I started a C implementation of the
virtual machine--which was soon abandoned after Mike Williams read some of my C
code--after which I worked on the compiler. Mike Williams wrote the virtual
machine emulator and Robert Virding worked on the Erlang libraries.

• 1990 -- By 1990 the JAM machine was working well and had surpassed the
original goal of being seventy times faster than the original Prolog
interpreter. Erlang now had its own syntax (up to now it could be regarded as a
dialect of Prolog) and could be regarded as a language in its own right, rather
than as a dialect of Prolog.

• 1991 -- Claes Wikström added distribution to Erlang. The JAM machine was now
stable and had replaced the Prolog implementation of Erlang.

• 1992 -- A decision was made at Ericsson Business Systems (EBC) to develop a
product based on ACS/Dunder. This product was called the Mobility
Server--Ericsson presented Erlang developments [1, 33], at The XIV
International Switching Symposium in Yokohama, Japan.

• 1993 -- Ericsson starts a wholly owned subsidiary company called Erlang
Systems AB. The purpose of this company was to market and sell Erlang to
external customers and to provide training and consulting services to both
internal and external customers. Support for Erlang itself was performed by the
Ericsson Computer Science Laboratory. The first commercial version of Erlang
was released.

• 1995 -- The Ericsson AXE-N project collapsed [55]. The AXE-N project was a
project to build a “next generation switch” to replace the Ericsson AXE-10.
This extremely large project ran from 1987-95.

After the AXE-N project collapsed a decision was made to “restart” the project
using Erlang. This project eventually resulted in the development of the AXD301
switch.

This project was on a much larger scale than any previous Erlang project. For
this reason a new group was started to provide support to the AXD project. The
Erlang libraries were renamed OTP (The Open Telecom Platform) and a new group
was created.

• 1996 -- In order to provide Erlang users with a stable software base a
project called OTP (The Open Telecom Platform) was started.  OTP was to be used
primarily in the newly started AXD project; all existing projects were to
migrate to OTP. The OTP project consolidated a number of ideas derived from
experience with Erlang and in particular from a earlier set of libraries
developed for use in the Mobility Server.

• 1997 -- The OTP project turned into the OTP product unit which was started in
order to take over formal responsibility for Erlang.  Prior to that, the CSLab
had formally been responsible for Erlang.  I moved from the CSLab to the OTP
group where I worked as the chief technical co-ordinator. During the period
1996–1997 a three-person group (myself, Magnus Fröberg and Martin Björklund)
redesigned and implemented the OTP core libraries.

• 1998 -- Ericsson delivered the first AXD301. The AXD301 is the subject of one
of our case studies in Chapter 8. At the time of writing (2003) the AXD301 has
over 1.7 million lines of Erlang code which probably makes it the largest
system ever to be written in a functional style of programming.

In February 1998 Erlang was banned for new product development within
Ericsson--the main reason for the ban was that Ericsson wanted to be a consumer
of software technologies rather than a producer.

In December 1998 Erlang and the OTP libraries were released subject to an Open
Source License. Since that date it has been freely available for download from
http://www.erlang.org/

In 1998 I led Ericsson together with a number of the original Erlang group to
found a new company Bluetail AB--in all 15 people left Ericsson. The idea
behind Bluetail was to use the Erlang technology to program products which make
Internet services more reliable.

• 1999 -- Bluetail produced two products written in Erlang. The Mail
Robustifier [11] and the Web Prioritizer. Ericsson produced a number of Erlang
products (including the AXD301 and GPRS systems).

• 2000 -- Bluetail is acquired by Alteon Web Systems [3] and subsequently
Alteon is acquired by Nortel Networks.

• > 2001 -- The Erlang/OTP technology is well established. By now there are so
many projects that nobody knows the exact number.  Erlang products developed by
Nortel are selling for “Hundreds of millions of kronor per year” [51]--The
Ericsson AXD301 is one of Ericsson’s most successful new products and there are
a dozen or so small companies using Erlang for product development.

1.2 Thesis outline

This thesis is organized into the following chapters:

• Chapter 1 introduces the main problem area that the thesis addresses, gives a
background to the work in the thesis and a chronology of the work performed in
the thesis together with a detailed chapter plan.

• Chapter 2 introduces an architectural model that is the basis for the later
chapters in the thesis. I define what is meant by an architecture, and specify
which components must be present in an architecture.  I talk about the problem
domain that my architecture is designed for. I talk about the underlying
philosophy behind the architecture and I introduce the idea of “Concurrency
Oriented Programming” (COP).

I develop the idea of COP and state the desirable properties that a programming
language and system must have in order to support a concurrency oriented style
of programming.

I review some previous related work, showing the similarities and dicerences
between this prior work and the material presented in this thesis.

• Chapter 3 describes the programming language Erlang. I describe a reasonably
large sub-set of the Erlang programming language, and motivate some of the
design decisions made in Erlang.

• Chapter 4 gives some examples of Erlang programming techniques.  I show how
to “factor” a design into its functional and non-functional components. I show
how to factor out notions of concurrency and fault-tolerance, and how to
program a generic client–server model.  I describe a technique for maintaining
the illusion that “everything is an Erlang process,” and give examples of how
to write code which handles errors.

• Chapter 5 gets to the central question of the thesis. It is concerned with
how to program systems which behave in a reasonable manner even in the presence
of errors. Central to the idea of fault tolerance is the notion of an error--I
describe what is meant by an error and what I mean when I talk about a
“fault-tolerant” system. I describe a strategy based on the idea of
“Supervision trees” which can be used for writing fault-tolerant software.

• Chapter 6 links the general principles of programming a fault-tolerant
system, developed in the previous chapter, to a number of specific programming
patterns developed for programming fault-tolerant systems. These programming
patterns are central to the understanding of the OTP system, and of how to
build fault-tolerant software in Erlang.

I give a complete example, involving the use of a client–server model, an
event-handler and a finite-state machine. These three components are added to a
supervision tree, which will monitor their progress and restart them in the
event of an error.

The entire program, is packaged into a single OTP “application.”

• Chapter 7 describes the OTP system. OTP stands for “Open Telecoms Platform”
and is an application operating system (AOS) for programming fault-tolerant
applications together with the delivery platform for the Erlang programming
language. It includes a large set of libraries for implementing fault-tolerant
systems, together with documentation and guides etc for understanding the
system.

In this chapter I briefly describe the OTP architecture and give details of the
main components in the system.

• Chapter 8 is the acid-test of our technology. Did the ideas work in practice?
In this chapter I analyse a number of large commercially successful products
that make use of OTP. The intention of this chapter is to see if we have
achieved our goals of programming a system which functions reliably in the
presence of software errors.

One of the projects studied in this chapter is the Ericsson AXD301, a
high-performance highly-reliable ATM switch. This project is interesting in its
own right, since it is one of the largest programs ever written in a functional
style.

• Chapter 9 is concerned with APIs and protocols. I ask how we can specify the
interfaces to modules or the interfaces between communicating components.

• In Chapter 10 I ask broader questions. Did the ideas work? Did they work well
or badly? Where can things be improved? What can we look for in the future and
how are we going to get there?
