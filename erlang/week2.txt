# Getting started with recursion

## factorial

- factorial of N is 1*2*3...*(N-1)*N
- factorial of 0 is 1

```
fac(0) ->
    1;
fac(N) ->
    fac(N-1)*N.
```

Let's test this by hand:

fac(3)
    fac(2)*3
    (fac(1)*2)*3
    ((fac(0)*1)*2)*3
    ((1*1)*2)*3
    6

fac(2)
    fac(1)*2
    1*2
    2
    
fac(1)
    fac(0)*1
    1*1
    1

## Guards

WARNING: will never terminate for negative numbers

- we need to add a test for N>0

```
fac(0) ->
    1;
fac(N) when N>0 ->       % will fail if N is negative
    fac(N-1)*N.
```

- guard: can contain arithmetical operations and comparisons
    - can be combined with ',' and ';'
    - can't use user-defined functions in guards
        - Why? Erlang devs wanted pattern matching to always terminate
        - we can use user-defined functions in case-expressions, though


## Let it fail

- Erlang philosophy: let it fail (early) / offensive programming
- caller is responsible to use the function correctly


# Recursion examples

https://www.futurelearn.com/courses/functional-programming-erlang/3/steps/488096

cf. recursion.erl


# Tail recursion

- second argument of a function is used to accumulate the result

```
fac(N) ->
    fac(N,1).
    
fac(0,P) ->
    P;
fac(N,P) when N>0 ->
    fac(N-1,P*N).
```

What's going on here?

fac(3)
    fac(3,1)
        fac(2,3)
            fac(1, 6)
                fac(0, 6)
                    6
    
- this basically emulates a loop

while (N>0)
    (N,P) = (N-1, P*N);
return P; 

## Looping the loop

```
loop(N) when N>0 ->
    io:format("~p~n", [N}),
    loop(N-1);

loop(N) ->
    io:format("bye~n").
```

What does it do?

```
1>loop(3)
3
2
1
bye
ok
```


# Another recursion: Fibonacci

- let's do a direct definition of adjacent pairs of Fib numbers

```
% fibP(N) returns the tuple {fib(N), fib(N+1)}
fibP(0) ->
    {0,1};
fibP(N) ->
    {P,C} = fibP(N-1),  % P: previous, C: current
    {C,P+C}.

% define fib by extracting from the fibP result 
fib(N) ->
    {P,_} = fibP(N),
    P.
```

# More complex pattern matching

- represent geometric objects like this:

```
{circle, {X,Y}, R}       % R: radius
{rectangle, {X,Y}, H, W} % H: height, W: width
```

- first elem of the tuple is an atom that represents the type
- use it in definitions:

```
area({circle, {X,Y}, R}) ->
    math:pi()*R*R;
area({rectangle, {X,Y}, H, W}) ->
    H+W.
```

## two purposes of pattern matching

- distinguish between two cases: circle vs. rectangle
- extract components from a case: X,Y,R


# Lists

- ordered collection of elements
- elements can occur multiple times
- empty list: []
- pattern [X|Xs]: X is the head, Xs is the tail (i.e. the rest of the list)

```
1> [X|Xs] = [2,3,4,5].
[2,3,4,5]
2> X.
2
3> Xs.
[3,4,5]
```

We could define our own "head" and "tail" commands now:

```
head([X|_Xs]) -> X.
tail([_X|Xs]) -> Xs.

second(Xs) -> head(tail(Xs)).

second([_X,Y|_Zs]) -> Y.
```


## Building and matching lists

In the Erlang shell try evaluating the following expressions

```
1> A = [1,2,4,1,3].
[1,2,4,1,3]
2> [2,3|A].
[2,3,1,2,4,1,3]

3> [97,104,97,33].
"aha!"

4> [2|[1,3|[4|[]]]].
[2,1,3,4]

5> [B|Bs] = [2,3|A].
[2,3,1,2,4,1,3]
6> A = tl(Bs).
[1,2,4,1,3]

7> [C,C|_] = [2,2,3,3,4].
[2,2,3,3,4]
8> C.
2
```


# Introducing case expressions

In the Erlang shell try evaluating the following expressions

```
Eshell V9.2  (abort with ^G)
1> case [2,3,4] of
1>  [X,Y|_] -> X+Y;
1>  [S] -> S;
1>  _ -> 0
1> end.
5
```

```
1> case [6] of
1>  [X,Y|_] -> X+Y;
1>  [S] -> S;
1>  _ -> 0
1> end.
6
```

```
2> case [] of
2>  [X,Y|_] -> X+Y;
2>  [S] -> S;
2>  _ -> 0
2> end. 
0
```


# Recursion over lists

- looks like this:

```
foo([]) -> ... '
foo([X|Xs]) -> ... foo(Xs) ... .
```

## sum of a list of numbers

```
sum([]) -> 0 '
sum([X|Xs]) -> ... sum(Xs) ... .
```

- the key idea: if you know that the sum of [3,4,5] is 12,
  then you know that the sum of [2,3,4,5] is 2 + 12

### direct recursive definition

```
sum([]) -> 0;
sum([X|Xs]) -> X + sum(Xs).
```

Example:

sum([2,3,4,5])
    2 + sum([3,4,5)
    2 + 3 + sum([4,5])
    2 + 3 + 4 + sum([5])
    2 + 3 + 4 + 5 + sum([])
    2 + 3 + 4 + 5 + 0
    14

### tail recursive definition

```
sum(Xs) -> sum(Xs, 0).

sum([], S) -> S.
sum([X|Xs], S) -> sum(Xs, X+S).
```

Example:

sum([2,3,4,5])
    sum([2,3,4,5], 0)
        sum([3,4,5], 2+0)
            sum([4,5], 3+2)
