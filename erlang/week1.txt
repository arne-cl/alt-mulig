
```
1> 3+4.
7

2> 3>4.
false

3> 3<4.
true

4> [1,2,3].
[1,2,3]

5> A = [1,2,3]. % assignment
[1,2,3]

6> A = [4,5,6]. % can't assign to a variable that's already bound
** exception error: no match of right hand side value [4,5,6]

7> A.          
[1,2,3]

8> hd(A). % head of list A
1

9> tl(A). % tail of list A
[2,3]

10> f(A). % forget binding of A
ok

11> A.
* 2: variable 'A' is unbound

12> f(). % forget all variable bindings
ok

13> (fun(X) -> X+X end)(2). % use anonymous function in an expression
4

14> q(). % quit the erlang shell
ok
```


# Erlang data: numbers and atoms

https://www.futurelearn.com/courses/functional-programming-erlang/3/steps/488087

## Numbers: integers and floats

- integers are "bignums": arbitrarily large w/ full precision

```
2>  100000 * 100000 * 100000 * 100000 * 100000 * 10000 * 10000 * 10000.                                                │
10000000000000000000000000000000000000
```

- different bases can be used: base#number

```
3> 2#100.                                                                                                              │
4
```

- operators: + - * / div rem
    - div and rem are for integers

```
6> 11 div 5.                                                                                                           │
2                                                                                                                      │

7> 11 rem 5. % remainder of the integer division                                                                                                       │
1                                                                                                                      │

8> 11.0 div 5. % div only works w/ ints
** exception error: an error occurred when evaluating an arithmetic expression
     in operator  div/2
        called as 11.0 div 5
9> 11.0 / 5.
2.2 
```

## Atoms: "just a piece of data"

- stands for itself
- can be compared

```
11> foo.
foo
12> foo == 'I am an atom'.
false
13> foo > 'I am an atom'.
true
14> foo == foo.
true
15> bar < baz.
true
```

- special atoms: true false


## Tuples: putting values together

- heterogeneous: can have different types in different fields

```
{"Joe", "Armstrong", 55}
{1.2, 1.5}
{{1.2, 1.5}, {2.4, 5.0}} % tuple of tuples
```

- common idiom: use the first field to indicate the data type used in the tuple

```
{rectangle, {1.2, 1.5}, {2.4, 5.0}}
{circle, {1.1, 2.1}, 3.0}
```

## Lists: collection of values

- typically homogeneous

["Joe", "Armstrong"]
[]
[{1,2}, {3,5}]

## Why both Tuples and Lists?

- can do different things (cf. next week)

## Strings are just lists of characters

3> "abc".
"abc"
4> [97, 98, 99].
"abc"
5> {97, 98, 99}.  % one difference between lists and tuples ...
{97,98,99}

6> $a % print asci code of character 'a'
97


## Functions as data

```
7> fun (X) -> X*2 end.
#Fun<erl_eval.6.99386804>
```

- functions as arguments to other functions

```
8> lists:map(fun (X) -> X*2 end, [1,2,3,4]). % apply function to every element of a list
[2,4,6,8]
9> lists:foldr(fun (X, Y) -> X*Y end, 1, [1,2,3,4]). % like reduce in map-reduce
24
```


# Erlang data in practice

https://www.futurelearn.com/courses/functional-programming-erlang/3/steps/488089

not true.                       % false
true and false.                 % false 

length([2,3,4,5]).              % 4

[2,3]++[4].                     % [2,3,4]
[2,3]++[[4]].                   % [2,3,[4]]

(fun (X) -> X+2 end)(40).       % 42
fun (X) -> X+2 end(40).         % 42

2#100.                          % 4
100#2.                          % * 1: illegal base '100'
34#2.                           % 2
2#34.                           % * 1: illegal integer

[97,98,99].                     % "a,b,c"
[$h,$e,$l,$l,$o].               % "hello"
[$h,$e,$l,$l,o].                % [104,101,108,108,o] // can't mix ascii values and chars???

[34,3,5,36,37].                 % [34,3,5,36,37]. // because 3 and 5 aren't part of ascii??
[34,35,36,37].                  % "\"#$%"

false and (3 == (4 div 0)).     % ** exception error: an error occurred when evaluating an arithmetic expression
                                % division by zero
false andalso (3 == (4 div 0)). % false // why ???
true orelse (3 == (4 div 0)).   % true // why ???


# Variables and patters

https://www.futurelearn.com/courses/functional-programming-erlang/3/steps/488090

- if variable doesn't have a value (it's not bound, yet), '=' assigns it a value

```
1> A = 2+3.
5
2> B = A-1.
4
```

- if a var already has a value, '=' tries to match the RHS to the LHS

```
3> A = B+1.
5
4> A = B.
** exception error: no match of right hand side value 4
```

## How can we use variables in Erlang?

- to name values and then use those variables to define other values

```
1> A = 2+3.
5
2> B = A-1.
4

5> C=[A,B,A].
[5,4,5]
```

- put patterns on LHS of an assignment

```
1> {A,B} = {2,3}.
{2,3}
2> B.
3
```

- and then use those vars in assignments

```
3> {A,C} = {2,5}. % works b/c A has value 2
{2,5}

4> {A,D} = {6,6}. % won't work b/c A has value 2
** exception error: no match of right hand side value {6,6}
```

- we can use repeated variables in patterns

```
1> {A,A} = {2,2}.
{2,2}
2> A.            
2
3> {B,B} = {2,5}.
** exception error: no match of right hand side value {2,5}
```


# Pattern matching

https://www.futurelearn.com/courses/functional-programming-erlang/3/steps/488091

## no updatable variables

- therefore, we can't write for-loops
- we can use f() to forget bindings, but only in the erl shell

## defining functions

```
double(X) ->
    times(X,2).

times(X,Y) ->
    X*Y.
```

- we can use literal values in function defintions:

```
is_zero(0) ->
    true; % this is not the end of the function definition, so we use ";" instead of "." here
is_zero(X) ->
    false.
```

This was a function definition consisting of two clauses.
They are matched sequentially (i.e. the first succeeding one is used).

## defining exclusive or (xor)

```
xOr(true,false) ->
    true;
xOr(false,true) ->
    true;
xOr(X,Y) ->
    false.
```

- common idiom: "don't care"

```
xOr(true,false) ->
    true;
xOr(false,true) ->
    true;
xOr(_,_) ->
    false.
```

- use pattern matching to check equality:

```
xOr(X,X) ->
    false;
xOr(_,_) ->
    true.
```


# Excercise: Variables and patterns in practice

cf. patterns.erl

https://www.futurelearn.com/courses/functional-programming-erlang/3/steps/488092

- write additional versions of xor functions

